import ffmpeg from "fluent-ffmpeg";
import ffmpegPath from "ffmpeg-static";
import ffprobePath from "ffprobe-static";
import fs from "fs";
import path from "path";

ffmpeg.setFfmpegPath(ffmpegPath as string);
ffmpeg.setFfprobePath(ffprobePath.path);

// –°–∫–ª–µ–π–∫–∞ –∑–∞—Ä–∞–Ω–µ–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–∞ concat
export async function concatVideos(
  videoPaths: string[],
  output = "final.mp4",
  outputDir: string
): Promise<string> {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
  for (const videoPath of videoPaths) {
    if (!fs.existsSync(videoPath)) {
      throw new Error(`–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${videoPath}`);
    }
  }

  if (videoPaths.length === 0) {
    throw new Error("–ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤–∏–¥–µ–æ –¥–ª—è —Å–∫–ª–µ–π–∫–∏");
  }

  console.log(`üì¶ –°–∫–ª–µ–∏–≤–∞–µ–º ${videoPaths.length} –≤–∏–¥–µ–æ –≤ ${output}`);

  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ –¥–ª—è concat demuxer
  const listFile = path.join(outputDir, "concat_list.txt");
  const fileContent = videoPaths
    .map((p) => `file '${p.replace(/'/g, "'\\''")}'`)
    .join("\n");

  fs.writeFileSync(listFile, fileContent);

  return new Promise((resolve, reject) => {
    ffmpeg()
      .input(listFile)
      .inputOptions(["-f", "concat", "-safe", "0"])
      .outputOptions("-c copy") // Copy streams without re-encoding for speed
      .on("start", (commandLine) => {
        console.log(`üé¨ –ó–∞–ø—É—Å–∫ FFmpeg: ${commandLine}`);
      })
      .on("progress", (progress) => {
        if (progress.percent) {
          console.log(`‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: ${Math.round(progress.percent)}%`);
        }
      })
      .on("error", (err) => {
        console.error("‚ùå –û—à–∏–±–∫–∞ FFmpeg:", err.message);
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–ø–∏—Å–∫–∞
        try {
          fs.unlinkSync(listFile);
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
        }
        reject(err);
      })
      .on("end", () => {
        console.log(`‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –≤ ${output}`);

        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–ø–∏—Å–∫–∞
        try {
          fs.unlinkSync(listFile);
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
        }

        resolve(output);
      })
      .save(output);
  });
}
