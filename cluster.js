import fs from "fs";

const VIDEOS_JSON = "videos.json";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
const loadVideos = () => JSON.parse(fs.readFileSync(VIDEOS_JSON, "utf-8"));

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
const calculateDistance = (a, b) => {
  const colorDiff = Math.sqrt(
    a.dominantColor.reduce(
      (sum, c, i) => sum + (c - b.dominantColor[i]) ** 2,
      0
    )
  );
  const brightnessDiff = Math.abs(a.brightness - b.brightness);
  return colorDiff + brightnessDiff;
};

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
const clusterVideos = (videos, threshold = 30) => {
  const clusters = [];
  videos.forEach((video) => {
    let added = false;
    for (const cluster of clusters) {
      if (calculateDistance(video, cluster[0]) < threshold) {
        cluster.push(video);
        added = true;
        break;
      }
    }
    if (!added) clusters.push([video]);
  });
  return clusters;
};

// –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —Å —É—á–µ—Ç–æ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
const clusterByOrientation = (videos, threshold) => {
  const byOrientation = {
    portrait: videos.filter((v) => v.orientation === "portrait"),
    landscape: videos.filter((v) => v.orientation === "landscape"),
  };

  return {
    portrait: clusterVideos(byOrientation.portrait, threshold),
    landscape: clusterVideos(byOrientation.landscape, threshold),
  };
};

const saveClusters = (clusters) => {
  fs.writeFileSync("clusters.json", JSON.stringify(clusters, null, 2));
};

async function main() {
  const videos = loadVideos();

  const threshold = 30; // –ü–æ–¥–±–µ—Ä–∏ –ø–æ—Ä–æ–≥, –∫–∞–∫ –æ–±—Å—É–∂–¥–∞–ª–∏ —Ä–∞–Ω–µ–µ
  const clustered = clusterByOrientation(videos, threshold);

  saveClusters(clustered);

  console.log("‚úÖ –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —Å —É—á–µ—Ç–æ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
  console.log(`üìå –ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: ${clustered.portrait.length}`);
  console.log(`üìå –ê–ª—å–±–æ–º–Ω—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: ${clustered.landscape.length}`);
}

main().catch(console.error);
