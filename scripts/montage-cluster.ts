import path from "path";
import fs from "fs";
import { loadVideosJson } from "../modules/data/videos";
import { loadClustersJson } from "../modules/data/clusters";
import { VideoData } from "../modules/data/types";
import { downloadVideo } from "../modules/pexels/download";
import { trimVideo } from "../modules/montage/trim-video";
import { convertVideo } from "../modules/montage/convert-video";
import { concatVideos } from "../modules/montage/concat-videos";
import {
  TEMP_TRIMMED_DIR,
  TEMP_CONVERTED_DIR,
  MONTAGE_OUTPUT_DIR,
} from "../modules/data/constants";

// –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
async function ensureDirectoriesExist(): Promise<void> {
  [TEMP_TRIMMED_DIR, TEMP_CONVERTED_DIR, MONTAGE_OUTPUT_DIR].forEach((dir) => {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
  });
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –º–æ–Ω—Ç–∞–∂ –∏–∑ –≤–∏–¥–µ–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–ª–∞—Å—Ç–µ—Ä–µ
 */
async function main() {
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã –∏ –≤–∏–¥–µ–æ
  console.log("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –∏ –≤–∏–¥–µ–æ...");
  const clusters = loadClustersJson();
  const videos = loadVideosJson();

  // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  const orientation = process.argv[3] || "portrait";

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
  if (orientation !== "portrait" && orientation !== "landscape") {
    console.error(
      "–ù–µ–≤–µ—Ä–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'portrait' –∏–ª–∏ 'landscape'"
    );
    process.exit(1);
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫–ª–∞—Å—Ç–µ—Ä–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  const clusterIndex = process.argv[2]
    ? parseInt(process.argv[2])
    : clusters[orientation].length - 1;

  console.log(
    `\n=== –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–Ω—Ç–∞–∂–∞ –∏–∑ ${orientation} –∫–ª–∞—Å—Ç–µ—Ä–∞ #${clusterIndex} ===\n`
  );

  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ
  const videoMap = new Map<number, VideoData>();
  videos.forEach((video) => videoMap.set(video.id, video));

  // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
  const orientationClusters =
    orientation === "portrait" ? clusters.portrait : clusters.landscape;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–ª–∞—Å—Ç–µ—Ä—ã
  if (!orientationClusters || orientationClusters.length === 0) {
    console.error(`–ö–ª–∞—Å—Ç–µ—Ä—ã —Å –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π ${orientation} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!`);
    console.error(
      "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Ç–µ—Ä—ã —Å –ø–æ–º–æ—â—å—é 'create-search-cluster.ts' –∏–ª–∏ 'cluster-videos.ts'"
    );
    process.exit(1);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä
  if (clusterIndex < 0 || clusterIndex >= orientationClusters.length) {
    console.error(`–ò–Ω–¥–µ–∫—Å –∫–ª–∞—Å—Ç–µ—Ä–∞ ${clusterIndex} –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.`);
    console.error(
      `–î–æ—Å—Ç—É–ø–Ω—ã–µ ${orientation} –∫–ª–∞—Å—Ç–µ—Ä—ã: ${orientationClusters.length}`
    );
    process.exit(1);
  }

  // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä
  const cluster = orientationClusters[clusterIndex];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ –≤–∏–¥–µ–æ
  if (!cluster.videoIds || cluster.videoIds.length === 0) {
    console.error(`–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä –ø—É—Å—Ç (–Ω–µ—Ç –≤–∏–¥–µ–æ).`);
    process.exit(1);
  }

  // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Ç–µ—Ä–µ
  console.log(`\n–ö–ª–∞—Å—Ç–µ—Ä: ${cluster.theme || `–ö–ª–∞—Å—Ç–µ—Ä #${clusterIndex}`}`);
  console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: ${cluster.videoIds.length}`);
  console.log(
    `–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: ${cluster.quality.toFixed(3)} (—á–µ–º –Ω–∏–∂–µ, —Ç–µ–º –ª—É—á—à–µ)`
  );

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
  const validVideoIds = cluster.videoIds.filter((id: number) =>
    videoMap.has(id)
  );
  if (validVideoIds.length === 0) {
    console.error("–í —ç—Ç–æ–º –∫–ª–∞—Å—Ç–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ.");
    process.exit(1);
  }

  // –°–æ–∑–¥–∞–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ —Ç–µ–º—ã –∫–ª–∞—Å—Ç–µ—Ä–∞
  const theme = cluster.theme || `${orientation}-cluster-${clusterIndex}`;
  const cleanTheme = theme.toLowerCase().replace(/[^a-z0-9]+/g, "-");
  const outputName = `montage-${cleanTheme}`;
  const outputPath = path.join(MONTAGE_OUTPUT_DIR, `${outputName}.mp4`);

  // –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ
  console.log("\n–í–∏–¥–µ–æ –≤ —ç—Ç–æ–º –∫–ª–∞—Å—Ç–µ—Ä–µ:");
  validVideoIds.forEach((id: number, index: number) => {
    const video = videoMap.get(id);
    console.log(`${index + 1}. ID: ${id}, URL: ${video?.url || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}`);
  });

  // –°–æ–∑–¥–∞–µ–º –º–æ–Ω—Ç–∞–∂
  console.log(`\n–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–Ω—Ç–∞–∂–∞ –∏–∑ ${validVideoIds.length} –≤–∏–¥–µ–æ...`);
  try {
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    await ensureDirectoriesExist();

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –≤–∏–¥–µ–æ
    console.log("\n1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–∏–¥–µ–æ...");

    // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–µ–∑–∫–∞
    const trimmedVideoPaths: string[] = [];
    for (const videoId of validVideoIds) {
      const video = videoMap.get(videoId);
      if (!video) continue;

      // –í—ã–±–∏—Ä–∞–µ–º –≤–∏–¥–µ–æ—Ñ–∞–π–ª —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
      const highestQualityFile = video.video_files.reduce((a, b) =>
        a.width && b.width ? (a.width > b.width ? a : b) : a
      );

      // –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
      const trimmedPath = path.join(TEMP_TRIMMED_DIR, `trimmed_${videoId}.mp4`);

      // –°–∫–∞—á–∏–≤–∞–µ–º –∏ –æ–±—Ä–µ–∑–∞–µ–º
      console.log(`\nüì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ ${videoId}...`);
      const downloadedPath = await downloadVideo(highestQualityFile.link);

      console.log(`‚úÇÔ∏è –û–±—Ä–µ–∑–∫–∞ –≤–∏–¥–µ–æ –¥–æ 5 —Å–µ–∫—É–Ω–¥: ${videoId}`);
      await trimVideo(downloadedPath, trimmedPath);

      trimmedVideoPaths.push(trimmedPath);
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
    console.log("\n2. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ...");
    const convertedVideoPaths: string[] = [];
    for (const trimmedPath of trimmedVideoPaths) {
      const convertedPath = path.join(
        TEMP_CONVERTED_DIR,
        `converted_${path.basename(trimmedPath)}`
      );

      console.log(`üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ: ${path.basename(trimmedPath)}`);
      await convertVideo(trimmedPath, convertedPath);

      convertedVideoPaths.push(convertedPath);
    }

    // –°–∫–ª–µ–π–∫–∞
    console.log("\n3. –°–∫–ª–µ–π–∫–∞ –≤–∏–¥–µ–æ...");
    await concatVideos(convertedVideoPaths, outputPath, MONTAGE_OUTPUT_DIR);

    console.log(`\n‚úÖ –ú–æ–Ω—Ç–∞–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: ${outputPath}`);
  } catch (error) {
    console.error("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ–Ω—Ç–∞–∂–∞:", error);
    process.exit(1);
  }
}

main().catch((error) => {
  console.error("‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", error);
  process.exit(1);
});
